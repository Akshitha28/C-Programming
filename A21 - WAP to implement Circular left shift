/*
NAME: Akshitha S
DATE: 25/12/2023
TITLE: WAP to implement Circular left shift
Sample Input:   Enter num: 12
                Enter n : 3
Sample Output:  Result in Binary: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0
*/

#include <stdio.h>

int circular_left (int, int);       //Function declaration of circular_left
int print_bits (int);               //Function declaration of print_bits

int main()
{
    int num, n, ret;
    printf ("Enter num: ");
    scanf ("%d", &num);
    printf ("Enter n : ");
    scanf ("%d", &n);

    if ((n >= 0) && (n < 32))
    {
        ret = circular_left (num, n);       //Function call to 'circular_left' with the function arguments 'num' and 'n'.
        printf ("Result in Binary: ");
        print_bits(ret);                    //Function call to 'print_bits' with the function arguments 'ret'.
        printf ("\n");
    }
    else
    {
        printf ("The value of 'n' shall be in the range of 0 to 32.\n");
    }
    return 0;
}

int circular_left (int num, int n)
{
    return ((num << n) | (((unsigned int) num >> (32 - n))));           //Bits are left shifted normally and the MSB side bits are right shifted to position them exactly at the vacated bits on the LSB side. The OR operation gives the final result of Circular Left shift.
}

int print_bits (int res)
{
    for (int i = 31; i >= 0; i--)
    {
        if (res & (1 << i))         //If the AND operation is a non-zero value, print "1".
        {
            printf ("1 ");
        }
        else                        //If the AND operation is a zero-value, print "0".
        {
            printf ("0 ");
        }
    }
    return 1;
}
